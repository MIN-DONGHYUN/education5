/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.72
 * Generated at: 2023-06-07 03:36:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.tiles.tile2;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class sideinfo_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/NCS/workspace(spring)/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Board/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1683599588119L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
 String ctxPath = request.getContextPath(); 
      out.write("\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("	\r\n");
      out.write("   .highcharts-figure,\r\n");
      out.write("   .highcharts-data-table table {\r\n");
      out.write("       min-width: 320px;\r\n");
      out.write("       max-width: 800px;\r\n");
      out.write("       margin: 1em auto;\r\n");
      out.write("   }\r\n");
      out.write("   \r\n");
      out.write("   .highcharts-data-table table {\r\n");
      out.write("       font-family: Verdana, sans-serif;\r\n");
      out.write("       border-collapse: collapse;\r\n");
      out.write("       border: 1px solid #ebebeb;\r\n");
      out.write("       margin: 10px auto;\r\n");
      out.write("       text-align: center;\r\n");
      out.write("       width: 100%;\r\n");
      out.write("       max-width: 500px;\r\n");
      out.write("   }\r\n");
      out.write("   \r\n");
      out.write("   .highcharts-data-table caption {\r\n");
      out.write("       padding: 1em 0;\r\n");
      out.write("       font-size: 1.2em;\r\n");
      out.write("       color: #555;\r\n");
      out.write("   }\r\n");
      out.write("   \r\n");
      out.write("   .highcharts-data-table th {\r\n");
      out.write("       font-weight: 600;\r\n");
      out.write("       padding: 0.5em;\r\n");
      out.write("   }\r\n");
      out.write("   \r\n");
      out.write("   .highcharts-data-table td,\r\n");
      out.write("   .highcharts-data-table th,\r\n");
      out.write("   .highcharts-data-table caption {\r\n");
      out.write("       padding: 0.5em;\r\n");
      out.write("   }\r\n");
      out.write("   \r\n");
      out.write("   .highcharts-data-table thead tr,\r\n");
      out.write("   .highcharts-data-table tr:nth-child(even) {\r\n");
      out.write("       background: #f8f8f8;\r\n");
      out.write("   }\r\n");
      out.write("   \r\n");
      out.write("   .highcharts-data-table tr:hover {\r\n");
      out.write("       background: #f1f7ff;\r\n");
      out.write("   }\r\n");
      out.write("   \r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<script src=\"");
      out.print( ctxPath);
      out.write("/resources/Highcharts-10.3.1/code/highcharts.js\"></script>\r\n");
      out.write("<script src=\"");
      out.print( ctxPath);
      out.write("/resources/Highcharts-10.3.1/code/modules/exporting.js\"></script>\r\n");
      out.write("<script src=\"");
      out.print( ctxPath);
      out.write("/resources/Highcharts-10.3.1/code/modules/export-data.js\"></script>\r\n");
      out.write("<script src=\"");
      out.print( ctxPath);
      out.write("/resources/Highcharts-10.3.1/code/modules/accessibility.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("var weatherTimejugi = 0;  // 단위는 밀리초\r\n");
      out.write("\r\n");
      out.write("   $(document).ready(function() {\r\n");
      out.write("      \r\n");
      out.write("	   loopshowNowTime();\r\n");
      out.write("	   \r\n");
      out.write("	   \r\n");
      out.write("	  // 시간이 대략 매 30분 0초가 되면 기상청 날씨정보를 자동 갱신해서 가져오려고 함.\r\n");
      out.write("      // (매 정시마다 변경되어지는 날씨정보를 정시에 보내주지 않고 대략 30분이 지난다음에 보내주므로)\r\n");
      out.write("      var now = new Date();\r\n");
      out.write("      var minute = now.getMinutes();  // 현재시각중 분을 읽어온다.\r\n");
      out.write("      \r\n");
      out.write("      if(minute < 30) { // 현재시각중 분이 0~29분 이라면\r\n");
      out.write("         weatherTimejugi = (30-minute)*60*1000;  // 현재시각의 분이 0분이라면 weatherTimejugi에 30분을 넣어준다.\r\n");
      out.write("                                                 // 현재시각의 분이 5분이라면 weatherTimejugi에 25분을 넣어준다.\r\n");
      out.write("                                                 // 현재시각의 분이 29분이라면 weatherTimejugi에 1분을 넣어준다.\r\n");
      out.write("      }\r\n");
      out.write("      else if(minute == 30) {\r\n");
      out.write("         weatherTimejugi = 1000;                 // 현재시각의 분이 30분이라면 weatherTimejugi에 1초 넣어준다.\r\n");
      out.write("      }\r\n");
      out.write("      else {                                      // 현재시각의 분이 31~59분이라면\r\n");
      out.write("         weatherTimejugi = ( (60-minute)+30 )*60*1000;  // 현재시각의 분이 31분이라면 weatherTimejugi에 (29+30)분을 넣어준다.\r\n");
      out.write("                                                        // 현재시각의 분이 40분이라면 weatherTimejugi에 (20+30)분을 넣어준다.\r\n");
      out.write("                                                        // 현재시각의 분이 59분이라면 weatherTimejugi에 (1+30)분을 넣어준다.\r\n");
      out.write("      }\r\n");
      out.write("   \r\n");
      out.write("	   \r\n");
      out.write("	   \r\n");
      out.write("	   startshowWeather(); // 기상청 날씨정보 공공API XML데이터 호출 및 매 1시간 마다 주기적으로 기상청 날씨정보 공공API XML데이터 호출하기\r\n");
      out.write("	   \r\n");
      out.write("	   //showWeather();	// 날씨 하는것 테스트 하기 \r\n");
      out.write("	   \r\n");
      out.write("	   \r\n");
      out.write("   }); // end of $(document).ready(); ---------------------------------\r\n");
      out.write("\r\n");
      out.write("   function showNowTime() {\r\n");
      out.write("      \r\n");
      out.write("      var now = new Date();\r\n");
      out.write("   \r\n");
      out.write("      var month = now.getMonth() + 1;\r\n");
      out.write("      if(month < 10) {\r\n");
      out.write("         month = \"0\"+month;\r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("      var date = now.getDate();\r\n");
      out.write("      if(date < 10) {\r\n");
      out.write("         date = \"0\"+date;\r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("      var strNow = now.getFullYear() + \"-\" + month + \"-\" + date;\r\n");
      out.write("      \r\n");
      out.write("      var hour = \"\";\r\n");
      out.write("       if(now.getHours() < 10) {\r\n");
      out.write("           hour = \"0\"+now.getHours();\r\n");
      out.write("       } \r\n");
      out.write("       else {\r\n");
      out.write("          hour = now.getHours();\r\n");
      out.write("       }\r\n");
      out.write("      \r\n");
      out.write("       \r\n");
      out.write("      var minute = \"\";\r\n");
      out.write("      if(now.getMinutes() < 10) {\r\n");
      out.write("         minute = \"0\"+now.getMinutes();\r\n");
      out.write("      } else {\r\n");
      out.write("         minute = now.getMinutes();\r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("      var second = \"\";\r\n");
      out.write("      if(now.getSeconds() < 10) {\r\n");
      out.write("         second = \"0\"+now.getSeconds();\r\n");
      out.write("      } else {\r\n");
      out.write("         second = now.getSeconds();\r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("      strNow += \" \"+hour + \":\" + minute + \":\" + second;\r\n");
      out.write("      \r\n");
      out.write("      $(\"span#clock\").html(strNow);\r\n");
      out.write("   \r\n");
      out.write("   }// end of function showNowTime() -----------------------------\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("   function loopshowNowTime() {\r\n");
      out.write("      showNowTime();\r\n");
      out.write("      \r\n");
      out.write("      var timejugi = 1000;   // 시간을 1초 마다 자동 갱신하려고.\r\n");
      out.write("      \r\n");
      out.write("      setTimeout(function() {\r\n");
      out.write("                  loopshowNowTime();   \r\n");
      out.write("               }, timejugi);\r\n");
      out.write("      \r\n");
      out.write("   }// end of loopshowNowTime() --------------------------\r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("   // ------ 기상청 날씨정보 공공API XML데이터 호출하기 -------- //\r\n");
      out.write("   \r\n");
      out.write("   function showWeather(){\r\n");
      out.write("	   \r\n");
      out.write("	   $.ajax({\r\n");
      out.write("		   url:\"");
      out.print( request.getContextPath());
      out.write("/opendata/weatherXML.action\",\r\n");
      out.write("	       type:\"get\",\r\n");
      out.write("		   dataType:\"xml\",   /* 데이터 타입 xml을 가져와야 하므로  xml을 사용 */\r\n");
      out.write("		   success:function(xml){\r\n");
      out.write("			   /* 맨 꼭대기의 태그를 읽어오자  */\r\n");
      out.write("			   var rootElement = $(xml).find(\":root\");\r\n");
      out.write("			   //console.log(\"확인용 최상위 태그 : \" + $(rootElement).prop(\"tagName\"));\r\n");
      out.write("			   // 확인용 최상위 태그 : current\r\n");
      out.write("			   \r\n");
      out.write("			   var weather = $(rootElement).find(\"weather\");\r\n");
      out.write("			   var updateTime = $(weather).attr(\"year\")+\"년 \"+ $(weather).attr(\"month\")+\"월 \" + $(weather).attr(\"day\")+\"일 \" + $(weather).attr(\"hour\")+\"시\";\r\n");
      out.write("		  	   // console.log(updateTime);\r\n");
      out.write("		  	   // 2023년 06월 07일 11시\r\n");
      out.write("		  	   \r\n");
      out.write("		  	   var localArr = $(rootElement).find(\"local\");\r\n");
      out.write("		  	   //console.log(\"지역개수 : \" + localArr.length);\r\n");
      out.write("		  	   // 지역개수 : 97\r\n");
      out.write("		  	   \r\n");
      out.write("		  	   \r\n");
      out.write("			  	var html = \"날씨정보 발표시각 : <span style='font-weight:bold;'>\"+updateTime+\"</span>&nbsp;\";\r\n");
      out.write("	            html += \"<span style='color:blue; cursor:pointer; font-size:9pt;' onclick='javascript:showWeather();'>업데이트</span><br/><br/>\";\r\n");
      out.write("	            html += \"<table class='table table-hover' align='center'>\";\r\n");
      out.write("	            html += \"<tr>\";\r\n");
      out.write("	            html += \"<th>지역</th>\";\r\n");
      out.write("	            html += \"<th>날씨</th>\";\r\n");
      out.write("	            html += \"<th>기온</th>\";\r\n");
      out.write("	            html += \"</tr>\";\r\n");
      out.write("	            \r\n");
      out.write("	            // ====== XML 을 JSON 으로 변경하기  ====== //\r\n");
      out.write("	               var jsonObjArr = [];\r\n");
      out.write("	            // ====== XML 을 JSON 으로 변경하기 끝  ====== //\r\n");
      out.write("	            \r\n");
      out.write("	            \r\n");
      out.write("	            for(var i = 0; i < localArr.length; i++) {\r\n");
      out.write("	            	 var local = $(localArr).eq(i);\r\n");
      out.write("	            	/* \r\n");
      out.write("	            	   .eq(index) 는 선택된 요소들을 인덱스 번호로 찾을 수 있는 선택자이다. \r\n");
      out.write("					       마치 배열의 인덱스(index)로 값(value)를 찾는 것과 같은 효과를 낸다.\r\n");
      out.write("					*/\r\n");
      out.write("					\r\n");
      out.write("					// console.log($(local).text() + \"stn_id : \" + $(local).attr(\"stn_id\")  + \" icon:\" + $(local).attr(\"icon\") + \" desc:\" + $(local).attr(\"desc\") + \" ta:\" + $(local).attr(\"ta\"));  // 지역명을 나타낸다. .text는 글자를 가져옴 \r\n");
      out.write("					/*\r\n");
      out.write("						속초 stn_id : 90 icon:01 desc:맑음 ta:25.4\r\n");
      out.write("						북춘천 stn_id : 93 icon:03 desc:구름많음 ta:23.4\r\n");
      out.write("						철원 stn_id : 95 icon:03 desc:구름많음 ta:22.4\r\n");
      out.write("						...... \r\n");
      out.write("						북부산 stn_id : 296 icon:03 desc:구름많음 ta:26.1\r\n");
      out.write("					*/\r\n");
      out.write("								\r\n");
      out.write("	            	 var icon = $(local).attr(\"icon\");\r\n");
      out.write("	                 if(icon == \"\") {\r\n");
      out.write("	                    icon = \"없음\";\r\n");
      out.write("	                 }\r\n");
      out.write("	                 \r\n");
      out.write("	                 html += \"<tr>\";\r\n");
      out.write("	                 html += \"<td>\"+$(local).text()+\"</td><td><img src='/board/resources/images/weather/\"+icon+\".png' />\"+$(local).attr(\"desc\")+\"</td><td>\"+$(local).attr(\"ta\")+\"</td>\";\r\n");
      out.write("	                 html += \"</tr>\";\r\n");
      out.write("					\r\n");
      out.write("	                 \r\n");
      out.write("	              	// ====== XML 을 JSON 으로 변경하기  ====== //\r\n");
      out.write("	                  var jsonObj = {\"locationName\":$(local).text(), \"ta\":$(local).attr(\"ta\")};\r\n");
      out.write("	                  \r\n");
      out.write("	                  jsonObjArr.push(jsonObj);\r\n");
      out.write("	               	// ====== XML 을 JSON 으로 변경하기  ====== // \r\n");
      out.write("	                 \r\n");
      out.write("	            }// end of for \r\n");
      out.write("	            \r\n");
      out.write("				html += \"</table>\";\r\n");
      out.write("				\r\n");
      out.write("				// 테이블 모양으로 출력하기 \r\n");
      out.write("				$(\"div#displayWeather\").html(html);\r\n");
      out.write("				\r\n");
      out.write("				// 차트 그리기 \r\n");
      out.write("				// ====== XML 을 JSON 으로 변경하기  ====== //\r\n");
      out.write("	            var str_jsonObjArr = JSON.stringify(jsonObjArr); \r\n");
      out.write("	                              // JSON객체인 jsonObjArr를 String(문자열) 타입으로 변경해주는 것 \r\n");
      out.write("	                              \r\n");
      out.write("	            $.ajax({\r\n");
      out.write("	               url:\"");
      out.print( request.getContextPath());
      out.write("/opendata/weatherXMLtoJSON.action\",\r\n");
      out.write("	               type:\"POST\",\r\n");
      out.write("	               data:{\"str_jsonObjArr\":str_jsonObjArr},\r\n");
      out.write("	               dataType:\"JSON\",\r\n");
      out.write("	               success:function(json){\r\n");
      out.write("	                  \r\n");
      out.write("	               	  //console.log(JSON.stringify(json));\r\n");
      out.write("	                  //[{\"locationName\":\"춘천\",\"ta\":\"25.0\"},{\"locationName\":\"백령도\",\"ta\":\"18.2\"},{\"locationName\":\"강릉\",\"ta\":\"28.1\"},{\"locationName\":\"서울\",\"ta\":\"21.4\"},{\"locationName\":\"인천\",\"ta\":\"21.1\"},{\"locationName\":\"울릉도\",\"ta\":\"24.7\"},{\"locationName\":\"수원\",\"ta\":\"21.5\"},{\"locationName\":\"청주\",\"ta\":\"23.8\"},{\"locationName\":\"대전\",\"ta\":\"23.3\"},{\"locationName\":\"안동\",\"ta\":\"23.9\"},{\"locationName\":\"포항\",\"ta\":\"26.8\"},{\"locationName\":\"대구\",\"ta\":\"26.1\"},{\"locationName\":\"전주\",\"ta\":\"25.2\"},{\"locationName\":\"울산\",\"ta\":\"26.7\"},{\"locationName\":\"창원\",\"ta\":\"26.2\"},{\"locationName\":\"광주\",\"ta\":\"25.1\"},{\"locationName\":\"부산\",\"ta\":\"24.1\"},{\"locationName\":\"목포\",\"ta\":\"22.5\"},{\"locationName\":\"여수\",\"ta\":\"22.5\"},{\"locationName\":\"홍성\",\"ta\":\"23.7\"},{\"locationName\":\"제주\",\"ta\":\"22.2\"}]\r\n");
      out.write("	                  \r\n");
      out.write("	                  // ======== chart 그리기 ========= // \r\n");
      out.write("	                  var dataArr = [];\r\n");
      out.write("	                  $.each(json, function(index, item){\r\n");
      out.write("	                     dataArr.push([item.locationName, \r\n");
      out.write("	                                  Number(item.ta)]);\r\n");
      out.write("	                  });// end of $.each(json, function(index, item){})------------\r\n");
      out.write("	                  \r\n");
      out.write("	                  \r\n");
      out.write("	                  Highcharts.chart('weather_chart_container', {\r\n");
      out.write("	                      chart: {\r\n");
      out.write("	                          type: 'column'\r\n");
      out.write("	                      },\r\n");
      out.write("	                      title: {\r\n");
      out.write("	                          text: '오늘의 전국 기온(℃)'   // 'ㄹ' 을 누르면 ℃ 가 나옴.\r\n");
      out.write("	                      },\r\n");
      out.write("	                      subtitle: {\r\n");
      out.write("	                      //    text: 'Source: <a href=\"http://en.wikipedia.org/wiki/List_of_cities_proper_by_population\">Wikipedia</a>'\r\n");
      out.write("	                      },\r\n");
      out.write("	                      xAxis: {\r\n");
      out.write("	                          type: 'category',\r\n");
      out.write("	                          labels: {\r\n");
      out.write("	                              rotation: -45,\r\n");
      out.write("	                              style: {\r\n");
      out.write("	                                  fontSize: '10px',\r\n");
      out.write("	                                  fontFamily: 'Verdana, sans-serif'\r\n");
      out.write("	                              }\r\n");
      out.write("	                          }\r\n");
      out.write("	                      },\r\n");
      out.write("	                      yAxis: {\r\n");
      out.write("	                          min: -10,\r\n");
      out.write("	                          title: {\r\n");
      out.write("	                              text: '온도 (℃)'\r\n");
      out.write("	                          }\r\n");
      out.write("	                      },\r\n");
      out.write("	                      legend: {\r\n");
      out.write("	                          enabled: false\r\n");
      out.write("	                      },\r\n");
      out.write("	                      tooltip: {\r\n");
      out.write("	                          pointFormat: '현재기온: <b>{point.y:.1f} ℃</b>'\r\n");
      out.write("	                      },\r\n");
      out.write("	                      series: [{\r\n");
      out.write("	                          name: '지역',\r\n");
      out.write("	                          data: dataArr, // **** 위에서 만든것을 대입시킨다. **** \r\n");
      out.write("	                          dataLabels: {\r\n");
      out.write("	                              enabled: true,\r\n");
      out.write("	                              rotation: -90,\r\n");
      out.write("	                              color: '#FFFFFF',\r\n");
      out.write("	                              align: 'right',\r\n");
      out.write("	                              format: '{point.y:.1f}', // one decimal\r\n");
      out.write("	                              y: 10, // 10 pixels down from the top\r\n");
      out.write("	                              style: {\r\n");
      out.write("	                                  fontSize: '10px',\r\n");
      out.write("	                                  fontFamily: 'Verdana, sans-serif'\r\n");
      out.write("	                              }\r\n");
      out.write("	                          }\r\n");
      out.write("	                      }]\r\n");
      out.write("	                      \r\n");
      out.write("	                  });\r\n");
      out.write("	               },\r\n");
      out.write("				   error: function(request, status, error){\r\n");
      out.write("			           alert(\"code: \"+request.status+\"\\n\"+\"message: \"+request.responseText+\"\\n\"+\"error: \"+error);\r\n");
      out.write("			       }\r\n");
      out.write("				   \r\n");
      out.write("			   });\r\n");
      out.write("	              \r\n");
      out.write("	           // ====== XML 을 JSON 으로 변경하기  ====== //\r\n");
      out.write("\r\n");
      out.write("		            \r\n");
      out.write("		   },\r\n");
      out.write("		   error: function(request, status, error){\r\n");
      out.write("	           alert(\"code: \"+request.status+\"\\n\"+\"message: \"+request.responseText+\"\\n\"+\"error: \"+error);\r\n");
      out.write("	       }\r\n");
      out.write("		   \r\n");
      out.write("	   });\r\n");
      out.write("	   \r\n");
      out.write("   }// end of function showWeather()\r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   function startshowWeather() {\r\n");
      out.write("      loopshowWeather();   // 날씨를 보인다.\r\n");
      out.write("      \r\n");
      out.write("      setTimeout(function() {\r\n");
      out.write("         showWeather();   \r\n");
      out.write("      }, weatherTimejugi); // 현재시각의 분이 5분이라면 weatherTimejugi가 25분이므로 25분후인 30분에 showWeather();를 실행한다.\r\n");
      out.write("   }// end of function startshowWeather() --------------------------   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   function loopshowWeather() {\r\n");
      out.write("      showWeather();\r\n");
      out.write("      \r\n");
      out.write("      setTimeout(function() {\r\n");
      out.write("           loopshowWeather();   \r\n");
      out.write("      }, weatherTimejugi + (60*60*1000));  // 현재시각의 분이 5분이라면 weatherTimejugi가 25분이므로 25분후인 30분에 1시간을 더한후에 showWeather();를 실행한다.\r\n");
      out.write("   }// end of function loopshowWeather() --------------------------   \r\n");
      out.write("  \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<div style=\"min-height: 1100px; margin-bottom: 50px;\">\r\n");
      out.write("   <div style=\"text-align: center; font-size: 16pt;\">\r\n");
      out.write("      현재시각 :&nbsp; <span id=\"clock\" style=\"color:green; font-weight:bold;\"></span>\r\n");
      out.write("   </div>\r\n");
      out.write("   \r\n");
      out.write("   <div id=\"displayWeather\" style=\"min-width: 90%; max-height: 500px; overflow-y: scroll; margin-top: 40px; margin-bottom: 70px; padding-left: 10px; padding-right: 10px;\"></div> \r\n");
      out.write("\r\n");
      out.write("   <div style=\"margin: 20px;\">\r\n");
      out.write("      ");
      out.write("\r\n");
      out.write("      <figure class=\"highcharts-figure\">\r\n");
      out.write("          <div id=\"weather_chart_container\"></div>\r\n");
      out.write("      </figure> \r\n");
      out.write("   </div>\r\n");
      out.write("</div>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
