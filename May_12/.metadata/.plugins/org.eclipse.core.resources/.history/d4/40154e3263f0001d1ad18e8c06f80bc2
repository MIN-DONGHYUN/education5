package com.spring.board.controller;

import java.util.*;

import javax.annotation.Resource;
import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.spring.board.common.Sha256;
import com.spring.board.model.*;
import com.spring.board.service.InterBoardService;


/*                                                     controller 의 의존객체는 service//  service 의 의존 객체는 model
	사용자 웹브라우저 요청(View)  ==> DispatcherServlet ==> @Controller 클래스 <==>> Service단(핵심업무로직단, business logic단) <==>> Model단[Repository](DAO, DTO) <==>> myBatis <==>> DB(오라클)           
	(http://...  *.action)                                  |                                                                                                                              
	 ↑                                                View Resolver
	 |                                                      ↓
	 |                                                View단(.jsp 또는 Bean명)
	 -------------------------------------------------------| 
	
	사용자(클라이언트)가 웹브라우저에서 http://localhost:9090/board/test/test_insert.action 을 실행하면
	배치서술자인 web.xml 에 기술된 대로  org.springframework.web.servlet.DispatcherServlet 이 작동된다.
	DispatcherServlet 은 bean 으로 등록된 객체중 controller 빈을 찾아서  URL값이 "/test_insert.action" 으로
	매핑된 메소드를 실행시키게 된다.                                               
	Service(서비스)단 객체를 업무 로직단(비지니스 로직단)이라고 부른다.
	Service(서비스)단 객체가 하는 일은 Model단에서 작성된 데이터베이스 관련 여러 메소드들 중 관련있는것들만을 모아 모아서
	하나의 트랜잭션 처리 작업이 이루어지도록 만들어주는 객체이다.
	여기서 업무라는 것은 데이터베이스와 관련된 처리 업무를 말하는 것으로 Model 단에서 작성된 메소드를 말하는 것이다.
	이 서비스 객체는 @Controller 단에서 넘겨받은 어떤 값을 가지고 Model 단에서 작성된 여러 메소드를 호출하여 실행되어지도록 해주는 것이다.
	실행되어진 결과값을 @Controller 단으로 넘겨준다.
*/

// ==== #30. 컨트롤러 선언 ====
@Controller
/* XML에서 빈을 만드는 대신에 클래스명 앞에 @Component 어노테이션을 적어주면 해당 클래스는 bean으로 자동 등록된다. 
그리고 bean의 이름(첫글자는 소문자)은 해당 클래스명이 된다. 
즉, 여기서 bean의 이름은 boardController 이 된다. 
여기서는 @Controller 를 사용하므로 @Component 기능이 이미 있으므로 @Component를 명기하지 않아도 BoardController 는 bean 으로 등록되어 스프링컨테이너가 자동적으로 관리해준다. 
*/
@Component
public class BoardController {

	
	// === #35. 의존객체 주입하기(DI: Dependency Injection) ===
	   // ※ 의존객체주입(DI : Dependency Injection) 
	   //  ==> 스프링 프레임워크는 객체를 관리해주는 컨테이너를 제공해주고 있다.
	   //      스프링 컨테이너는 bean으로 등록되어진 BoardController 클래스 객체가 사용되어질때, 
	   //      BoardController 클래스의 인스턴스 객체변수(의존객체)인 BoardService service 에 
	   //      자동적으로 bean 으로 등록되어 생성되어진 BoardService service 객체를  
	   //      BoardController 클래스의 인스턴스 변수 객체로 사용되어지게끔 넣어주는 것을 의존객체주입(DI : Dependency Injection)이라고 부른다. 
	   //      이것이 바로 IoC(Inversion of Control == 제어의 역전) 인 것이다.
	   //      즉, 개발자가 인스턴스 변수 객체를 필요에 의해 생성해주던 것에서 탈피하여 스프링은 컨테이너에 객체를 담아 두고, 
	   //      필요할 때에 컨테이너로부터 객체를 가져와 사용할 수 있도록 하고 있다. 
	   //      스프링은 객체의 생성 및 생명주기를 관리할 수 있는 기능을 제공하고 있으므로, 더이상 개발자에 의해 객체를 생성 및 소멸하도록 하지 않고
	   //      객체 생성 및 관리를 스프링 프레임워크가 가지고 있는 객체 관리기능을 사용하므로 Inversion of Control == 제어의 역전 이라고 부른다.  
	   //      그래서 스프링 컨테이너를 IoC 컨테이너라고도 부른다.
	   
	   //  IOC(Inversion of Control) 란 ?
	   //  ==> 스프링 프레임워크는 사용하고자 하는 객체를 빈형태로 이미 만들어 두고서 컨테이너(Container)에 넣어둔후
	   //      필요한 객체사용시 컨테이너(Container)에서 꺼내어 사용하도록 되어있다.
	   //      이와 같이 객체 생성 및 소멸에 대한 제어권을 개발자가 하는것이 아니라 스프링 Container 가 하게됨으로써 
	   //      객체에 대한 제어역할이 개발자에게서 스프링 Container로 넘어가게 됨을 뜻하는 의미가 제어의 역전 
	   //      즉, IOC(Inversion of Control) 이라고 부른다.
	   
	   
	   //  === 느슨한 결합 ===
	   //      스프링 컨테이너가 BoardController 클래스 객체에서 BoardService 클래스 객체를 사용할 수 있도록 
	   //      만들어주는 것을 "느슨한 결합" 이라고 부른다.
	   //      느스한 결합은 BoardController 객체가 메모리에서 삭제되더라도 BoardService service 객체는 메모리에서 동시에 삭제되는 것이 아니라 남아 있다.
	   
	   // ===> 단단한 결합(개발자가 인스턴스 변수 객체를 필요에 의해서 생성해주던 것)
	   // private InterBoardService service = new BoardService(); 
	   // ===> BoardController 객체가 메모리에서 삭제 되어지면  BoardService service 객체는 멤버변수(필드)이므로 메모리에서 자동적으로 삭제되어진다.   
	
/*	
	@Resource     // bean 객체의 객체명으로 Bean 을 주입해준다.
	private InterBoardService boardService;  // InterBoardService 의 bean 을 찾는다.
	
	@Inject     // type 에 따라 알아서 자동적으로 Bean 을 주입해준다.
	private InterBoardService service;  // InterBoardService 의 bean 을 찾는다.
*/
	
	@Autowired     // type 에 따라 알아서 자동적으로 Bean 을 주입해준다.
	private InterBoardService service;  // InterBoardService 의 bean 을 찾는다.
	
	
	// ===== ***** spring 기초 시작 ***** ===== //
	@RequestMapping(value="/test/test_insert.action")
	public String test_insert(HttpServletRequest request) {
		
		int n = service.test_insert();    // service단으로 넘긴다.  (InterBoardService 에서 받아온것)
		
		String message = "";
		
		if(n==1) {
			message = "데이터 입력 성공~";
		}
		else {
			message = "데이터 입력 실패 ㅠ";
		}
		
		request.setAttribute("message", message);
		request.setAttribute("n", n);   //request 에 담아서 view 단 페이지로 보내준다.
		
		
		return "test/test_insert";
	// /WEB-INF/views/test/test_insert.jsp 페이지를 만들어야 한다.	
	}
	
	
	@RequestMapping(value="/test/test_select.action")
	public String test_select(HttpServletRequest request) {
		
		List<TestVO> testvoList = service.test_select();
		
		request.setAttribute("testvoList", testvoList);
		
		
		return "test/test_select";
		// /WEB-INF/views/test/test_select.jsp 페이지를 만들어야 한다.		
	}
	
	
	
	// form 태그를 만들어보자 
	// @RequestMapping(value="/test/test_form.action", method = {RequestMethod.POST})   //오로지 POST 방식 만 허락하는 것임.
	// @RequestMapping(value="/test/test_form.action", method = {RequestMethod.GET})   //오로지 GET방식만 허락한다.
	@RequestMapping(value="/test/test_form.action")   //GET방식 및 POST 방식 모두 허락하는 것임.
	public String test_form(HttpServletRequest request) {
		
		String method = request.getMethod();
		
		if("GET".equalsIgnoreCase(method)) {   // GET 방식 이라면 
			
			return "test/test_form";   // view 단 페이지를 띄워라
			//  /WEB-INF/views/test/test_form.jsp 페이지를 만들어야 한다. 
		}
		else {  //post 방식이라면 
			
			String no = request.getParameter("no");
			String name = request.getParameter("name");
			
			// 값을 넘기려면 무조건 map으로 !!
			Map<String, String> paraMap = new HashMap<>();
			paraMap.put("no", no);
			paraMap.put("name", name);
			
			int n = service.test_insert(paraMap);  // insert 하기 위해 
			
			if(n == 1) {   // insert를 하였다면 
				return "redirect:/test/test_select.action";
		    	//   /test/test_select.action 페이지로 redirect(페이지이동)해라는 말이다.
			}
			else {
				return "redirect:/test/test_form.action";   
				// insert 못했다면 자기 페이지에 머무른다.
			}
			
			
		}
		
		
	}
	
	
	
	// form 태그 두번째 예시 VO 이용 
	@RequestMapping(value="/test/test_form_vo.action")   //GET방식 및 POST 방식 모두 허락하는 것임.
	public String test_form_vo(HttpServletRequest request, TestVO vo) {    //TestVO vo 는 자동적으로 TestVO 에 있는 것과 .jsp에 name 이 같다면 TestVO에 있는 Set 에 넣어준다.(현재 SetName, setNo)
		
		String method = request.getMethod();
		
		if("GET".equalsIgnoreCase(method)) {   // GET 방식 이라면 
			
			return "test/test_form_vo";   // view 단 페이지를 띄워라
			//  /WEB-INF/views/test/test_form_vo.jsp 페이지를 만들어야 한다. 
		}
		else {  //post 방식이라면 
			
			int n = service.test_insert(vo);
			
			
			if(n == 1) {   // insert를 하였다면 
				return "redirect:/test/test_select.action";
		    	//   /test/test_select.action 페이지로 redirect(페이지이동)해라는 말이다.
			}
			else {
				return "redirect:/test/test_form_vo.action";   
				// insert 못했다면 자기 페이지에 머무른다.
			}
			
			
		}
		
		
	}
	
	
	// form  세번째 실험 
	@RequestMapping(value="/test/test_form_2.action", method = {RequestMethod.GET})  //오로지 GET방식만 허락한다.
	public String test_form_2() {
		
		return "test/test_form_2";
		//   /WEB-INF/views/test/test_form_2.jsp 페이지를 만들어야 한다.
	}
	
	@RequestMapping(value="/test/test_form_2.action", method = {RequestMethod.POST}) //오로지 POST방식만 허락한다.
	public String test_form_2(HttpServletRequest request, TestVO vo) {
		
		int n = service.test_insert(vo);
		
		
		if(n == 1) {   // insert를 하였다면 
			return "redirect:/test/test_select.action";
	    	//   /test/test_select.action 페이지로 redirect(페이지이동)해라는 말이다.
		}
		else {
			return "redirect:/test/test_form_2.action";   
			// insert 못했다면 자기 페이지에 머무른다.
		}
	}
	
	
	
	
	/// ==== return 타입을 String 대신에 ModelAndView 를 사용해 보겠습니다. ==== //
	
	@RequestMapping(value="/test/test_form_vo_modelAndView.action")   //GET방식 및 POST 방식 모두 허락하는 것임.
	public ModelAndView test_form_vo_modelAndView(HttpServletRequest request, TestVO vo, ModelAndView mav) {    // ModelAndView 은 spring 에서 주고 있는 것이다.
		
		String method = request.getMethod();
		
		if("GET".equalsIgnoreCase(method)) {   // GET 방식 이라면 
			
			mav.setViewName("test/test_form_vo_modelAndView");
			//  /WEB-INF/views/test/test_form_vo.jsp 페이지를 만들어야 한다. 
		}
		else {  //post 방식이라면 
			
			int n = service.test_insert(vo);
			
			
			if(n == 1) {   // insert를 하였다면 
				mav.setViewName("redirect:/test/test_select_modelAndView.action");
		    	//   /test/test_select_modelAndView.action 페이지로 redirect(페이지이동)해라는 말이다.
			}
			else {
				mav.setViewName("redirect:/test/test_form_vo_modelAndView.action");  
				// insert 못했다면 /test_form_vo_modelAndView.action 자기 페이지에 머무른다.
			}
			
			
		}
		
		return mav;
		
		
	}
	
	@RequestMapping(value="/test/test_select_modelAndView.action", method = {RequestMethod.GET})  //오로지 GET방식만 허락한다.
	public ModelAndView test_select_modelAndView(ModelAndView mav) {
		
		
		List<TestVO> testvoList =  service.test_select();
		
		mav.addObject("testvoList", testvoList);     //request.setAttribute 와 같은 것이다.  밑에 경로에 값을 넘긴다.
		
		mav.setViewName("test/test_select_modelAndView");
		//    /WEB-INF/test/test_select_modelAndView.jsp 페이지를 만들어야 한다.
		
		return mav;
		
	}
	
	
	
	/// =============== ajax 연습 시작 ================= ///
	
	@RequestMapping(value="/test/test_form_3.action", method = {RequestMethod.GET})  //오로지 GET방식만 허락한다.
	public ModelAndView test_form_3(ModelAndView mav) {
			
		mav.setViewName("test/test_form_3");    //view 단 페이지를 띄워라 
		//    /WEB-INF/test/test_form_3.jsp 페이지를 만들어야 한다.
		
		return mav;
		
	}
	
	
	
	/*
	    @ResponseBody 란?
	        메소드에 @ResponseBody Annotation이 되어 있으면 return 되는 값은 View 단 페이지를 통해서 출력되는 것이 아니라 
	    return 되어지는 값 그 자체를 웹브라우저에 바로 직접 쓰여지게 하는 것이다. 
	        일반적으로 JSON 값을 Return 할때 많이 사용된다. 
	 */
	@ResponseBody    
	@RequestMapping(value="/test/ajax_insert.action", method = {RequestMethod.POST})  //오로지 POST방식만 허락한다.
	public String ajax_insert(HttpServletRequest request) {
		
		String no = request.getParameter("no");   // ajax 에서 넘어온 no를 대입
		String name = request.getParameter("name");   // ajax 에서 넘어온 no를 대입
		
		Map<String, String> paraMap = new HashMap<>();
		paraMap.put("no",no);
		paraMap.put("name",name);
		
		// map 저장한걸 service 단에 넘겨야 한다.
		
		int n = service.test_insert(paraMap);
		
		// 결과물을 json 형식으로 변경해야 한다.
		JSONObject jsonObj = new JSONObject();  // {} 형태로 나오게 된다.
		jsonObj.put("n", n);   // json 형태로 결과 값을 넣어준다 {"n":1}
		

		return jsonObj.toString();  //"{"n":1}" //String 타입으로 변경   다시 ajax로 돌아감
		
	}
	
	/*
	    @ResponseBody 란?
	        메소드에 @ResponseBody Annotation이 되어 있으면 return 되는 값은 View 단 페이지를 통해서 출력되는 것이 아니라 
	    return 되어지는 값 그 자체를 웹브라우저에 바로 직접 쓰여지게 하는 것이다. 
	        일반적으로 JSON 값을 Return 할때 많이 사용된다. 
	        
	    >>> 스프링에서 json 또는 gson을 사용한 ajax 구현시 데이터를 화면에 출력해 줄때 한글로 된 데이터가 '?'로 출력되어 한글이 깨지는 현상이 있다. 
               이것을 해결하는 방법은 @RequestMapping 어노테이션의 속성 중 produces="text/plain;charset=UTF-8" 를 사용하면 
               응답 페이지에 대한 UTF-8 인코딩이 가능하여 한글 깨짐을 방지 할 수 있다. <<<
	 */
	@ResponseBody
	@RequestMapping(value="/test/ajax_select.action", method = {RequestMethod.GET},  produces="text/plain;charset=UTF-8")  //오로지 GET방식만 허락한다.
	public String ajax_select() {
	
		// 데이터 베이스에 가서 정보를 몽땅 읽어오면 된다.
		List<TestVO> testvoList = service.test_select();
		
		JSONArray jsonArr = new JSONArray();  // 값을 읽어온걸 JSON 형태로 변경하기 위해 
		
		// 리스트에서 정보가 있다면 
		if(testvoList != null) {
			
			for( TestVO vo : testvoList) {   // 리스트를 하나하나 까보면 TestVO 에 있는 것이므로 
				
				JSONObject jsonObj = new JSONObject();  // {} 객체 생성 
				jsonObj.put("no", vo.getNo());   // TestVO 에 get에 저장되어 있으므로 이렇게 써야 한다.   {"no":"601"}
				jsonObj.put("name", vo.getName());   // TestVO 에 get에 저장되어 있으므로 이렇게 써야 한다.   {"no":"601" , "name":"이혜리"}
				jsonObj.put("writeday", vo.getWriteday());   // TestVO 에 get에 저장되어 있으므로 이렇게 써야 한다.   {"no":"601" , "name":"이혜리", "writeday":"2023-05-10 12:18:51"}
				
				jsonArr.put(jsonObj);
				
			}// end of for 
			
		}

		return jsonArr.toString();     // "[{"no":"601" , "name":"이혜리", "writeday":"2023-05-10 12:18:51"}]"
	}
	
	
	/// =============== ajax 연습 끝 ================= ///
	
	
	
	
	/// ===== ***** tiles 연습 시작 ***** ===== ///
	
	@RequestMapping(value="/test/tiles_test_1.action")
	public String tiles_test_1() {
		
		
		return "tiles_test_1.tiles1";
		//  /WEB-INF/views/tiles1/tiles_test_1.jsp 이 페이지를 만들어야 한다.
	}
	
	
	@RequestMapping(value="/test/tiles_test_2.action")
	public String tiles_test_2() {
		
		
		return "test/tiles_test_2.tiles1";
		//   /WEB-INF/views/tiles1/test/tiles_test_2.jsp 이 페이지를 만들어야 한다.
	}
	
	
	@RequestMapping(value="/test/tiles_test_3.action")
	public String tiles_test_3() {
		
		
		return "test/sample/tiles_test_3.tiles1";
		//   /WEB-INF/views/tiles1/test/sample/tiles_test_3.jsp 이 페이지를 만들어야 한다.
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////
	/// 이 앞은 tiles 1/////
	
	////////////////////////////////////////////////////////////////////////////////////////
	/// tiles 2 부분
	
	
	@RequestMapping(value="/test/tiles_test_4.action")
	public ModelAndView tiles_test_4(ModelAndView mav) {
		
		mav.setViewName("tiles_test_4.tiles2");
		//  /WEB-INF/views/tiles2/tiles_test_4.jsp 이 페이지를 만들어야 한다.
		
		return mav;
	}
	
	
	@RequestMapping(value="/test/tiles_test_5.action")
	public ModelAndView tiles_test_5(ModelAndView mav) {
		
		mav.setViewName("test/tiles_test_5.tiles2");
		//  /WEB-INF/views/tiles2/test/tiles_test_5.jsp 이 페이지를 만들어야 한다.
		
		return mav;
	}
	
	
	@RequestMapping(value="/test/tiles_test_6.action")
	public ModelAndView tiles_test_6(ModelAndView mav) {
		
		mav.setViewName("test/sample/tiles_test_6.tiles2");
		//  /WEB-INF/views/tiles2/test/sample/tiles_test_6.jsp 이 페이지를 만들어야 한다.
		
		return mav;
	}
	///////////////////////////////////////////////////////////////////////////////////
	
	
	@RequestMapping(value="/test/tiles_test_7.action")
	public ModelAndView tiles_test_7(ModelAndView mav) {
		
		mav.setViewName("test7/tiles_test_7.tiles3");
		//  /WEB-INF/views/tiles3/test7/content/tiles_test_7.jsp 이 페이지를 만들어야 한다.
		//  /WEB-INF/views/tiles3/test7/side.jsp 페이지를 만들어야 한다.
		return mav;
	}
	
	
	@RequestMapping(value="/test/tiles_test_8.action")
	public ModelAndView tiles_test_8(ModelAndView mav) {
		
		mav.setViewName("test8/tiles_test_8.tiles3");
		//  /WEB-INF/views/tiles3/test8/content/tiles_test_8.jsp 이 페이지를 만들어야 한다.
		//  /WEB-INF/views/tiles3/test8/side.jsp 페이지를 만들어야 한다.
		return mav;
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	
	@RequestMapping(value="/test/tiles_test_9.action")
	public ModelAndView tiles_test_9(ModelAndView mav) {
		
		mav.setViewName("test9/tiles_test_9.tiles4");
		//  /WEB-INF/views/tiles4/test9/content/tiles_test_9.jsp 이 페이지를 만들어야 한다.
		return mav;
	}
	
	
	// tiles 와 관계 없다?
	@RequestMapping(value="/test/test_10.action")
	public ModelAndView tiles_test_10(ModelAndView mav) {
		
		mav.setViewName("test/test10");  // tiles 가 아니므로 1순위가 아니고 2순위인 접두어, 접미어를 만든다. 
		//  /WEB-INF/views/test/test10.jsp 이 페이지를 만들어야 한다.
		return mav;
	}
	
	
	
	
	/// ===== ***** tiles 연습 끝 ***** ===== ///
	
	

	// ===== ***** spring 기초 끝 ***** ===== //
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// ========================= ***** 게시판 시작 ***** ========================== // 
	
	// === #36. 메인 페이지 요청 === // 
	
	// 먼저 com.spring.board 패키지에 있는 HomeController 클래스에 가서 @Controller 을 주석처리한다.
	@RequestMapping(value="/")
	public ModelAndView home(ModelAndView mav) {
		
		mav.setViewName("redirect:/index.action");  //  /오로 url 치면 홈인 index.action을 불러온다. 
		// view 페이지 : /WEB-INF/views/tiles1/main/index.jsp 페이지를 생성해야 한다.	
		return mav;
	}
	
	
	@RequestMapping(value="/index.action")
	public ModelAndView index(ModelAndView mav) {
		
		
		List<String> imgfilenameList = service.getImgfilenameList();   // 메소드 생성 
		
		mav.addObject("imgfilenameList", imgfilenameList);
		mav.setViewName("main/index.tiles1");  // veiw 단 페이지를 어디로 할지 설정하는 것이다. 
		// view 페이지 : /WEB-INF/views/tiles1/main/index.jsp 페이지를 생성해야 한다.
		
		
		return mav;
	}
	
	
	
	// === #40. 로그인 폼 페이지 요청 === //
	@RequestMapping(value="/login.action", method = {RequestMethod.GET})  // GET방식만 받아온다.
	public ModelAndView login(ModelAndView mav) {
		
		mav.setViewName("login/loginform.tiles1");
	// view 페이지 : /WEB-INF/views/tiles1/login/loginform.jsp 페이지를 생성해야 한다.
		
		return mav;
	}
	
	// === #41. 로그인 처리하기 === //
	@RequestMapping(value="/loginEnd.action", method = {RequestMethod.POST})  // POST방식만 받아온다.
	public ModelAndView loginEnd(ModelAndView mav, HttpServletRequest request) {  // 아이디와 비밀번호이므로 VO를 만들지 않고 request 를 사용하겠다.
		
		String userid = request.getParameter("userid");
		String pwd = request.getParameter("pwd");    // loginform.jsp 에서 form 태그로 전송된것을 받아온다. 
		
		// 값이 두개 이상이므로 map 에 담자 
		Map<String, String> paraMap = new HashMap<>();
		
		paraMap.put("userid",userid);
		paraMap.put("pwd",Sha256.encrypt(pwd));    //패스워드는 암호화가 되어 있으므로 암호화 해서 비교하자  (단방향 암호화)
		
		MemberVO loginuser = service.getLoginMember(paraMap);   // 서비스 단으로 보낸다. (회원 정보를 얻어오는 것이 주 목적 )
		
		
		// 존재하지 않는 아이디 또는 비밀번호를 사용해서 로그인 실패시 
		if(loginuser == null) {
			String message = "아이디 또는 암호가 틀립니다.";
			String loc = "javascript:history.back()";
			
			mav.addObject("message",message);
			mav.addObject("loc",loc);
			
			//msg.jsp 에서 request로 받아오기 위해 addObject 사용 
			// alert("${requestScope.message}");  // 메시지 출력해주기  (어떤 메시지든 여기를 통함)
			// location.href="${requestScope.loc}";// 페이지 이동   ( 어떤 페이지는 이동 페이지 어떤 페이지는 시작 페이지)
			
			mav.setViewName("msg");   // tiles 안써도 됨 
			// view 페이지 : /WEB-INF/views/msg.jsp 페이지를 생성해야 한다.	
			
		}
		else {  // 아이디와 암호가 존재하는 경우 
			
			if(loginuser.getIdle() == 1) {// 로그인 한지 1년이 경과한 경우 
				String message = "로그인을 한지 1년이 지나서 휴먼 상태로 되었습니다. \\n관리자에게 문의바랍니다.";
				String loc = request.getContextPath()+"/index.action";
				// 원래는 위와 같이 index.action아 아니라 휴먼인 계정을 풀어주는  페이지로 잡아주어야 한다. (생략한 것이다.)
				
				mav.addObject("message",message);
				mav.addObject("loc",loc);
				
				//msg.jsp 에서 request로 받아오기 위해 addObject 사용 
				// alert("${requestScope.message}");  // 메시지 출력해주기  (어떤 메시지든 여기를 통함)
				// location.href="${requestScope.loc}";// 페이지 이동   ( 어떤 페이지는 이동 페이지 어떤 페이지는 시작 페이지)
				
				mav.setViewName("msg");   // tiles 안써도 됨 
			}
			else { // 로그인한지 1년이내인 경우
				
				HttpSession session =  request.getSession();
				// 메모리에 생성되어져 있는 session을 불러오는 것이다. 
				
				session.setAttribute("loginuser", loginuser);
				// session(세션)에 로그인 되어진 사용자 정보인 loginuser 을 키이름을 "loginuser" 으로 저장시켜두는 것이다.  
				
				if(loginuser.isRequirepwdChange() == true) {   // 암호를 마지막으로 변경한 것이 3개월이 경과한 경우 
					String message = "비밀번호를 변경하신지 3개월이 지났습니다. \\n암호를 변경하시는 것을 추천합니다.";
					String loc = request.getContextPath()+"/index.action";
					// 원래는 위와 같이 index.action아 아니라 사용자의 암호를 변경해주는 페이지로 잡아주어야 한다. (생략한 것이다.)
					
					mav.addObject("message",message);
					mav.addObject("loc",loc);
					
					//msg.jsp 에서 request로 받아오기 위해 addObject 사용 
					// alert("${requestScope.message}");  // 메시지 출력해주기  (어떤 메시지든 여기를 통함)
					// location.href="${requestScope.loc}";// 페이지 이동   ( 어떤 페이지는 이동 페이지 어떤 페이지는 시작 페이지)
					
					mav.setViewName("msg");   // tiles 안써도 됨 
				}
				else { // 암호를 마지막으로 변경한 것이 3개월 이내인 경우 
					
					// 로그인을 해야만 접근할 수 있는 페이지에 로그인을 하지 않은 상태에서 접근을 시도한 경우 
		            // "먼저 로그인을 하세요!!" 라는 메시지를 받고서 사용자가 로그인을 성공했다라면
		            // 화면에 보여주는 페이지는 시작페이지로 가는 것이 아니라
		            // 조금전 사용자가 시도하였던 로그인을 해야만 접근할 수 있는 페이지로 가기 위한 것이다.
					
					String goBackURL = (String) session.getAttribute("goBackURL");   // BoardAOP 에서 저장해온 session 값을 가져온다.
					
					// 가져온 값이 존재한다면 
					if(goBackURL != null) {
						mav.setViewName("redirect:" + goBackURL);
						session.removeAttribute("goBackURL");   //goBackURL 의 세션을 제거한다.  즉 세션에서 반드시 제거해야 한다.
					}
					else {   // 처음부터 로그인을 시도 했다면 
						mav.setViewName("redirect:/index.action"); // 시작페이지로 이동한다. 
					}
				}
			}
		}
		
	//	mav.setViewName("");
	// view 페이지 : /WEB-INF/views/tiles1/login/loginform.jsp 페이지를 생성해야 한다.	
		
		
		return mav;
	}
	
	
	// === #50. 로그아웃 처리하기 === //
	@RequestMapping(value="/logout.action")  
	public ModelAndView logout(ModelAndView mav, HttpServletRequest request) {
		
		// 로그아웃시 시작페이지로 돌아가는 것임 
		HttpSession session = request.getSession();
		session.invalidate();    // 세션의 값을 날려버린다. 
		
		String message = "로그아웃 되었습니다.";
		String loc = request.getContextPath()+"/index.action";
		// 원래는 위와 같이 index.action아 아니라 사용자의 암호를 변경해주는 페이지로 잡아주어야 한다. (생략한 것이다.)
		
		mav.addObject("message",message);
		mav.addObject("loc",loc);
		
		//msg.jsp 에서 request로 받아오기 위해 addObject 사용 
		// alert("${requestScope.message}");  // 메시지 출력해주기  (어떤 메시지든 여기를 통함)
		// location.href="${requestScope.loc}";// 페이지 이동   ( 어떤 페이지는 이동 페이지 어떤 페이지는 시작 페이지)
		
		mav.setViewName("msg");   // tiles 안써도 됨 
		//  /WEB-INF/Views/msg.jsp
		
		
		return mav;
	}
	
	
	// === #51. 게시판 글쓰기 폼 페이지 요청 === //
	@RequestMapping(value="/add.action", method = {RequestMethod.GET})
	public ModelAndView requiredLogin_add( HttpServletRequest request, HttpServletResponse response, ModelAndView mav) {   // request 를 통해 세션 정보 얻어오기 response 사용한 이유는 dispatcher 에서 사용하기 위해 
	
		mav.setViewName("board/add.tiles1");
		// view 페이지 : /WEB-INF/views/tiles1/board/add.jsp 페이지를 생성해야 한다.
			
		return mav;
	}
	
	
	// === #54. 게시판 글쓰기 완료 요청 === //
	@RequestMapping(value="/addEnd.action", method = {RequestMethod.POST})
	public ModelAndView addEnd(ModelAndView mav, BoardVO boardvo) {   // request 를 통해 세션 정보 얻어오기 response 사용한 이유는 dispatcher 에서 사용하기 위해 

		/*   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			form 태그의 name 명과 BoardVO 의 필드명이 같다면  (add.jsp 의 form)
			request.getParameter("form 태그의 name명"); 을 사용하지 않더라도
			자동적으로 VoardVO boardvo 에 set 되어진다.
		*/
		
		int n = service.add(boardvo);   // <== 파일첨부가 없는 글쓰기 
		
		if(n == 1) {
			mav.setViewName("redirect:/list.action");
			// /list.action 페이지로 redirect(페이지 이동) 해라는 말이다.
		}
		else {
			mav.setViewName("board/error/add_error.tiles1");
			// view 페이지 : /WEB-INF/views/tiles1/board/error/add_error.jsp 페이지를 생성해야 한다.
			
		}
		
		return mav;
	}
	
	
	// === #58. 글 목록 보기 페이지 요청 === //
	@RequestMapping(value="/list.action")
	public ModelAndView list(ModelAndView mav) { 
	
		List<BoardVO> boardList = null;  // 글 목록이 없을 수 있으니 기본값 null로 준다.
		
		// === 페이징 처리를 안한 검색어가 없는 전체 글 목록을 보여주기 === //
		boardList = service.boardListNoSearch();    // DB에 검색이 없고 모두 보여주는 메소드
		
		mav.addObject("boardList", boardList);   // request.setAttribute 와 동일하다 
		mav.setViewName("board/list.tiles1");
	// view 페이지 : /WEB-INF/views/tiles1/board/list.jsp 페이지를 생성해야 한다.
		
		return mav;
	}
	
	
	// === #62. 글 1개를 보여주는 페이지 요청 === //
	@RequestMapping(value="/view.action")
	public ModelAndView view(ModelAndView mav, HttpServletRequest request) { 
	
		// 조회하고자 하는 글번호 받아오기
		String seq = request.getParameter("seq");
		
		
		try{
			Integer.parseInt(seq);
			// seq 한개만 보낼것으므로 map 사용 안해도 되지만 나중에 페이징 처리 등을 하기 위해 map을 사용한다
			
			Map<String, String> paraMap = new HashMap<>();
			
			paraMap.put("seq", seq);
			
			//세션 값 가져오기 
			HttpSession session = request.getSession();
			
			MemberVO loginuser = (MemberVO) session.getAttribute("loginuser");
			
			String login_userid = null;
			// 로그인 했다면 
			if(loginuser != null) {
				login_userid = loginuser.getUserid();  // 세션에서 유저의 아이디를 가져온다.
				// login_userid 는 로그인 되어진 사용자의 userid 이다.
			}
			
			
			paraMap.put("login_userid", login_userid);
			
			// 글 한개만 읽어올것이므로 BoardVO 사용 
			BoardVO boardvo = service.getView(paraMap);
			// 글 조회수 증가와 함깨 글 1개를 조회를 해주는 것
			
			
			
			
			
			
		}
		catch(Exception e) {
			// e.printStackTrace();
		}
		
		mav.setViewName("board/view.tiles1");
	// view 페이지 : /WEB-INF/views/tiles1/board/view.jsp 페이지를 생성해야 한다.	
		
		return mav;
	}
	
	
	
	
	
	// ========================= ***** 게시판 끝 ***** ========================== // 
	
}
