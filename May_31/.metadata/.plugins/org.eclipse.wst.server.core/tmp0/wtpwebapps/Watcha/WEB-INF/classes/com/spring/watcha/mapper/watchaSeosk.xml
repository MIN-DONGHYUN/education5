<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="watcha">

	<select id="ratingFive" parameterType="String" resultType="com.spring.watcha.common.MovieVO">
	    select movie_id, movie_title, poster_path
	    from
	    (
		    select row_number() over(order by R.rating_date desc) AS rno
		         , M.movie_id, M.movie_title, M.poster_path
		    from movie M right join star_rating R
		    on M.movie_id = R.movie_id
		    where user_id = #{user_id}
		    order by rating_date desc
	    ) A
	    where A.rno between 1 and 5	
	</select>

	<resultMap type="HashMap" id="userInfo_Map">
		<result property="user_id" 	 	 	column="user_id" 		  javaType="String"/>
		<result property="nickname" 	 	column="nickname" 		  javaType="String"/>
		<result property="profile_message" 	column="profile_message"  javaType="String"/>
		<result property="profile_image" 	column="profile_image" 	  javaType="String"/>
		<result property="avg_rating" 	 	column="avg_rating" 	  javaType="String"/>
		<result property="count_rating" 	column="count_rating" 	  javaType="String"/>
	</resultMap>
	
	<select id="userInfo" parameterType="String" resultMap="userInfo_Map">
	    select b.user_id, b.nickname, b.profile_message, b.profile_image
	         , A.avg_rating, A.count_rating 
	    from
	    (
	        select user_id, avg(rating) as avg_rating, count(rating) as count_rating
	        from star_rating
	        where user_id = #{user_id}   
	        group by user_id
	    ) A join member B
	    on A.user_id = B.user_id	
	</select>

	<select id="reviewCount" parameterType="String" resultType="String">
	    select count(review_id)
	    from movie_review
	    where user_id = #{user_id}
	</select>

	<select id="collectionCount" parameterType="String" resultType="String">
	    select count(collection_ID)
	    from collection
	    where user_id = #{user_id}
	</select>
	
	<resultMap type="HashMap" id="ratingMovies_Map">
		<result property="movie_id" 	 column="movie_id" 		javaType="String"/>
		<result property="movie_title"   column="movie_title" 	javaType="String"/>
		<result property="release_date"  column="release_date" 	javaType="String"/>
		<result property="poster_path"   column="poster_path" 	javaType="String"/>
		<result property="backdrop_path" column="backdrop_path" javaType="String"/>
		<result property="rating" 		 column="rating" 		javaType="String"/>
	</resultMap>
	
	<select id="ratingMovies" parameterType="String" resultMap="ratingMovies_Map">
	    select M.movie_id, M.movie_title, M.release_date, M.poster_path, M.backdrop_path
	         , R.rating
	    from movie M right join star_rating R
	    on M.movie_id = R.movie_id
	    where user_id = #{user_id}
	    order by rating_date desc	
	</select>

	<resultMap type="HashMap" id="myReviewPaging_Map">
		<result property="review_id" 	 	  column="review_id" 		  javaType="String"/>
		<result property="movie_id" 	 	  column="movie_id" 		  javaType="String"/>
		<result property="movie_title" 	 	  column="movie_title" 		  javaType="String"/>
		<result property="poster_path" 	 	  column="poster_path" 		  javaType="String"/>
		<result property="review_content" 	  column="review_content" 	  javaType="String"/>
		<result property="review_date" 	 	  column="review_date" 		  javaType="String"/>
		<result property="spoiler_status" 	  column="spoiler_status" 	  javaType="String"/>
		<result property="number_of_likes" 	  column="number_of_likes" 	  javaType="String"/>
		<result property="number_of_comments" column="number_of_comments" javaType="String"/>
	</resultMap>
	
	<select id="myReviewPaging" parameterType="String" resultMap="myReviewPaging_Map">
	    select review_id, movie_id, movie_title, poster_path, review_content, review_date, spoiler_status
	    	 , number_of_likes, number_of_comments
	    from
	    (
	        select row_number() over(order by R.review_date desc) AS rno
	             , R.review_id, M.movie_id, M.movie_title, M.poster_path, R.review_content
	             , to_char(R.review_date, 'yyyy-mm-dd') AS review_date
	             , R.spoiler_status, R.number_of_likes, R.number_of_comments
	        from movie_review R join movie M
	        on R.movie_id = M.movie_id
	        where user_id = #{user_id}
	    ) A
	    where rno between #{startRno} and #{endRno}
	</select>


</mapper>
