※ JPA 및 ORM 이란?
   - 참조사이트 : https://kyhslam.tistory.com/entry/Spring-JPA-1-JPA-%EB%B0%8F-%EC%85%8B%ED%8C%85

▷ ORM (Object Relational Mapping)
 
 - ORM은 애플리케이션의 클래스와 SQL 데이터베이스의 테이블 사이의 "맵핑 정보를 기술한 메타데이터" 를 사용하여, 
   자바 애플리케이션의 객체를 SQL 데이터베이스의 테이블에 자동으로 영속화 해주는 기술이다.
   영속(Persistent)이란? => 지속적인 것, 영원한 것   
   다시말해, ORM(Object Relational Mapping)은 RDB 테이블을 객체지향적으로 사용하기 위한 기술이다.
   즉, 자바객체와 RDB의 테이블을 매핑하여 자바 프로그램 코드 상에서 RDB를 객체지향적으로 쓸 수 있게끔 만든 기술이라고 생각하면 쉽다.
 
 - 객체는 객체대로 설계하고 관계형 데이터베이스는 관계형 데이터베이스대로 설계한다

 - ORM 프레임워크가 자바객체와 RDB 테이블 중간에서 매핑해준다


▷ JPA(Java Persistent API)

 - JPA(Java Persistent API)는 자바의 영속성 관리와 ORM(Object Relational Mapping)을 위한 표준 기술이다. 
   기존 EJB ORM(Object Relational Mapping) 이던 Entity Bean을 JPA 라고 바꾸어 체계화한 기술이다.

 - 이 JPA를 Spring 에서 쓸 수 있도록 한 것이 Spring Data JPA 이다.


▷ JDBC 대신 도메인 모델(JPA로 구현한 DB를 다루는 방식)을 사용하려는 이유는 ?
 - 객체 지향 프로그래밍의 장점을 활용하기 좋음
 - 코드를 재사용하는데 있어서 편함
 - 각종 디자인 패턴에 적용하기 좋음
 - 비즈니스 로직 구현 및 테스트가 편함


▷ ORM의 장점 
 - 객체 지향적으로 데이터를 관리하기 때문에 비즈니스 로직에 집중할 수 있고, 객체지향 개발이 가능하다
 - 유지보수성이 좋음
 - 각종 DB벤더에 종속적이지 않고 독립적임.


▷ ORM의 단점 
 - 학습 비용이 많다. 단순한 CRUD는 쉽지만 다양한 검색조건과 테이블이 여러개 사용되는 JOIN 일 경우 구현하기가 어렵다!!.
 - 제대로 사용하지 않으면 성능 이슈가 발생하고 데이터 손실이 발생할 수 있다.
 - SQL문의 튜닝이 불가하므로 Mybatis 를 사용할 때 보다 성능면에서 떨어진다.


▷ JPA의 동작과정  
   "01_JPA의동작과정.png" 이미지 참조 

 - JPA는 애플리케이션과 JDBC 사이에서 동작한다.
 - 개발자가 JPA를 사용하면 JPA내부에서 JDBC API를 사용하여 SQL을 호출하여 DB와 통신한다.
 - 개발자가 직접 JDBC API를 사용하는 것이 아니다.


▷ 저장과정  
  "02_JPA의저장과정.png" 이미지 참조 

▷ 조회과정 
  "03_JPA의조회과정.png" 이미지 참조 

  ◎ 조회과정에서 JPA가 하는일
    1) 엔티티의 매핑 정보를 바탕으로 적절한 SELECT SQL문을 생성해줌. 개발자가 SQL문을 작성하는 것이 아님.
    2) JDBC API를 사용하여 SQL을 DB에 보내줌.
    3) DB로부터 select 결과를 받아온다.
    4) select 결과를 객체에 모두 매핑해준다.

  ◎ 저장과정이나 조회과정에서 쿼리를 JPA가 만들어 주기 때문에 Object 와 RDB간의 패러다임 불일치를 해결해준다.

  "객체(Object)에 대한 이론적인 체계와 데이터베이스(DB)의 이론적인 체계는 서로 같은 것이 아니다" 라는 것을 
  '객체와 데이터베이스의 패러다임 불일치' 라고 부른다.

  "패러다임 불일치" - 참조 사이트 https://jgrammer.tistory.com/76
   - 데이터베이스는 데이터 중심으로 구조화 되어있다. 데이터베이스에는 객체의 상속, 다형성 같은 개념이 없다. 
     그렇다보니 객체와 데이터베이스가 지향하는 점이 다르다. 이것을 객체와 데이터베이스의 패러다임 불일치라고 한다. 
     자바 언어는 객체지향으로 이뤄져있고, 데이터베이스는 데이터 중심으로 구조화 되어 있기 때문에 패러다임 불일치 문제를 개발자가 해결해야한다. 
     이 과정에서 시간과 코드를 소비하는 문제가 있다.

  '패러다임(paradigm)' 
   - 사물이나 개념을 볼 때 어떤 한 시대 사람들의 견해나 사고를 근본적으로 규정하고 있는 테두리로서의 인식의 체계. 
   - 또는 어떤 사물을 바라보는 이론적인 틀이나 체계.



▷ JPA를 왜 사용하는가?  

▣ SQL중심적인 개발에서 객체 중심으로 개발
    - SQL 중심적인 개발의 문제점 [https://gmlwjd9405.github.io/2019/08/03/reason-why-use-jpa.html]

▣ 생산성
    ○ JPA를 사용하는 것은 마치 Java Collection에서 데이터를 넣었다 빼는 것 처럼 사용할 수 있게 만든 것이다.
    ○ 간단한 CRUD
        - 저장 : repository.save(membervo)  // save : 행이 존재하면 update, 행이 없으면 insert  해줌
        - 조회 : Member membervo - repository.findById(member_no)
        - 수정 : repository.save(membervo) // save : 행이 존재하면 update, 행이 없으면 insert  해줌
        - 삭제 : repository.deleteById(member_no)
        - 객체를 변경하면 자동적으로 DB에 DDL SQL문(alter table ...)이 실행된다.
     ○ 유지보수
        - 기존 : 필드 변경 시 테이블 설계를 수정하는 SQL문을 작성과 동시에 모든 SQL문을 수정해야 함
        - JPA : 필드만 추가하거나 삭제하면 된다. 즉, SQL문을 수정할 필요가 없다
     ○ Object와 RDB 간의 패러다임 불일치 해결 [https://gmlwjd9405.github.io/2019/08/04/what-is-jpa.html]
     ○ hibernate.dialect 속성 지정을 통해 다양한 데이터베이스 방언(DB벤더에 따라 조금씩 달라지는 DB연결설정방법)을 제공한다.
     ○ JPA는 데이터베이스에 종속적이지 않다. (데이터베이스 마다 SQL문법이 조금씩 다른데 JPA가 알아서 연결되어 사용중인 데이터베이스의 SQL문으로 변환해 준다.)

▣ 단점
  ○ JPA는 통계처리와 같이 복잡한 쿼리보다는 실시간 처리용 쿼리에 더 최적화되어 있다. 
    일반적인 Query를 사용할 수 있지만, 아주 세부적인 쿼리 작업을 필요하다면 Mybatis와 같은 Mapper 방식을 사용하는 것이 더 효율적일 수 있다.  여러 테이블을 JOIN 해서 작업하는 경우 JPA 를 사용하면 매우 복잡하고 어렵다.
  ○ 학습함에 있어서 어렵고 학습시간이 오래 걸린다.



